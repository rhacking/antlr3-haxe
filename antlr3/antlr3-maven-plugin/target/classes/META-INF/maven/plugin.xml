<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2017-06-11 -->

<plugin>
  <name>ANTLR 3 Maven plugin</name>
  <description>This is the brand new, re-written from scratch plugin for ANTLR v3.

Previous valiant efforts all suffered from being unable to modify the ANTLR Tool
itself to provide support not just for Maven oriented things but any other tool
that might wish to invoke ANTLR without resorting to the command line interface.

Rather than try to shoe-horn new code into the existing Mojo (in fact I think that
by incorporating a patch supplied by someone I ended up with tow versions of the
Mojo, I elected to rewrite everything from scratch, including the documentation, so
that we might end up with a perfect Mojo that can do everything that ANTLR v3 supports
such as imported grammar processing, proper support for library directories and
locating token files from generated sources, and so on.

In the end I decided to also change the the ANTLR Tool.java code so that it
would be the provider of all the things that a build tool needs, rather than
delegating things to 5 different tools. So, things like dependencies, dependency
sorting, option tracking, generating sources and so on are all folded back
in to ANTLR&apos;s Tool.java code, where they belong, and they now provide a
public interface to anyone that might want to interface with them.

One other goal of this rewrite was to completely document the whole thing
to death. Hence even this pom has more comments than funcitonal elements,
in case I get run over by a bus or fall off a cliff while skiing.

Jim Idle - March 2009</description>
  <groupId>org.antlr</groupId>
  <artifactId>antlr3-maven-plugin</artifactId>
  <version>3.5.3-SNAPSHOT</version>
  <goalPrefix>antlr3</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>antlr</goal>
      <description>Parses ANTLR grammar files {@code *.g} and transforms them into Java source
files.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.antlr.mojo.antlr3.Antlr3Mojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, then the code generated by the ANTLR code generator will
be set to debug mode. This means that when run, the code will &apos;hang&apos; and
wait for a debug connection on a TCP port (49100 by default).</description>
        </parameter>
        <parameter>
          <name>dfa</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, then the ANTLR tool will generate a description of the
DFA for each decision in the grammar in
&lt;a href=&quot;http://www.graphviz.org&quot;&gt;Dot format&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.Set</type>
          <required>false</required>
          <editable>true</editable>
          <description>A set of Ant-like exclusion patterns used to prevent certain files from
being processed. By default, this set is empty such that no files are
excluded.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.Set</type>
          <required>false</required>
          <editable>true</editable>
          <description>Provides an explicit list of all the grammars that should be included in
the generate phase of the plugin. Note that the plugin is smart enough to
realize that imported grammars should be included but not acted upon
directly by the ANTLR Tool.
&lt;p&gt;
A set of Ant-like inclusion patterns used to select files from the source
directory for processing. By default, the pattern &lt;code&gt;**&amp;#47;*.g&lt;/code&gt;
is used to select grammar files.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>libDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location for imported token files, e.g. {@code *.tokens} and imported
grammars. Note that ANTLR will not try to process grammars that it finds
to be imported into other grammars (in the same processing session).</description>
        </parameter>
        <parameter>
          <name>maxSwitchCaseLabels</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum number of alternatives allowed in an inline switch statement.
Beyond this, ANTLR will not generate a switch statement for the DFA.</description>
        </parameter>
        <parameter>
          <name>messageFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If this parameter is set, it indicates that any warning or error messages
returned by ANLTR, should be formatted in the specified way. Currently,
ANTLR supports the built-in formats {@code antlr}, {@code gnu} and
{@code vs2005}.</description>
        </parameter>
        <parameter>
          <name>minSwitchAlts</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The minimum number of alternatives for ANTLR to generate a switch
statement. For decisions with fewer alternatives, an if/else if/else
statement will be used instead.</description>
        </parameter>
        <parameter>
          <name>nfa</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, then the ANTLR tool will generate a description of the
NFA for each rule in &lt;a href=&quot;http://www.graphviz.org&quot;&gt;Dot format&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory where the parser files generated by ANTLR will be stored.
The directory will be registered as a compile source root of the project
such that the generated files will participate in later build phases like
compiling and packaging.</description>
        </parameter>
        <parameter>
          <name>printGrammar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, then the ANTLR tool will print a version of the input
grammar(s) which are stripped of any embedded actions.</description>
        </parameter>
        <parameter>
          <name>profile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, then the generated parser will compute and report profile
information at runtime.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current Maven project.</description>
        </parameter>
        <parameter>
          <name>report</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, then after the tool has processed an input grammar file
it will report various statistics about the parser, such as information
on cyclic DFAs, which rules may use backtracking, and so on.</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where the ANTLR grammar files ({@code *.g}) are located.</description>
        </parameter>
        <parameter>
          <name>trace</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, the generated parser code will log rule entry and exit
points to stdout ({@link System#out} for the Java target) as an aid to
debugging.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true, then ANTLR will report verbose messages during the code
generation process. This includes the names of files, the version of
ANTLR, and more.</description>
        </parameter>
      </parameters>
      <configuration>
        <debug implementation="boolean" default-value="false"/>
        <dfa implementation="boolean" default-value="false"/>
        <libDirectory implementation="java.io.File" default-value="${basedir}/src/main/antlr3/imports"/>
        <maxSwitchCaseLabels implementation="int" default-value="300"/>
        <messageFormat implementation="java.lang.String" default-value="antlr"/>
        <minSwitchAlts implementation="int" default-value="3"/>
        <nfa implementation="boolean" default-value="false"/>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/antlr3"/>
        <printGrammar implementation="boolean" default-value="false"/>
        <profile implementation="boolean" default-value="false"/>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
        <report implementation="boolean" default-value="false"/>
        <sourceDirectory implementation="java.io.File" default-value="${basedir}/src/main/antlr3"/>
        <trace implementation="boolean" default-value="false"/>
        <verbose implementation="boolean" default-value="true"/>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-profile</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact-manager</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>1.0-alpha-5</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>1.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-8</version>
    </dependency>
    <dependency>
      <groupId>classworlds</groupId>
      <artifactId>classworlds</artifactId>
      <type>jar</type>
      <version>1.1-alpha-2</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-compiler-api</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr</artifactId>
      <type>jar</type>
      <version>3.5.3-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-runtime</artifactId>
      <type>jar</type>
      <version>3.5.3-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>ST4</artifactId>
      <type>jar</type>
      <version>4.0.8</version>
    </dependency>
  </dependencies>
</plugin>